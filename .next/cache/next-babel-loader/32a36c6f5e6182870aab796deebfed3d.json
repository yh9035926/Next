{"ast":null,"code":"import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from \"../type\";\nfunction loadPostAPI(data) {\n  return axios.get(`/posts`, data);\n}\nfunction* loadPost(action) {\n  try {\n    console.log(\"로드 사가 실행\");\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\n//-------------------------------------------------------------------\nfunction loadMyInfoAPI() {\n  return axios.get(\"/user\");\n}\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    yield put({\n      //put은 dipatch\n\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadMyInfo() {\n  yield takeEvery(LOAD_MY_INFO_REQUEST, loadMyInfo); //반복\n}\n//-------------------------------------------------------------\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); //patch 일부분 수정\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadMyInfo)]);\n}","map":{"version":3,"names":["fork","all","takeLatest","delay","put","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","loadPostAPI","data","get","loadPost","action","console","log","result","type","err","response","watchLoadPost","loadMyInfoAPI","loadMyInfo","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","error","watchLoadMyInfo","takeEvery","LOAD_MY_INFO_REQUEST","addPostAPI","post","content","addPost","id","watchAddPost","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","likePostAPI","patch","likePost","watchLikePost","unlikePostAPI","unlikePost","watchUnlikePost","postSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/post.js"],"sourcesContent":["import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_TO_ME,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_OF_ME,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n} from \"../type\";\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/posts`, data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    console.log(\"로드 사가 실행\");\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\r\n}\r\n\r\n//-------------------------------------------------------------------\r\nfunction loadMyInfoAPI() {\r\n  return axios.get(\"/user\");\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n  try {\r\n    const result = yield call(loadMyInfoAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: LOAD_MY_INFO_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_MY_INFO_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMyInfo() {\r\n  yield takeEvery(LOAD_MY_INFO_REQUEST, loadMyInfo); //반복\r\n}\r\n//-------------------------------------------------------------\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`); //patch 일부분 수정\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchLoadMyInfo),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}