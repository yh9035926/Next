{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\com\\\\Desktop\\\\YH\\\\next\\\\components\\\\PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addPost } from \"../reducers/post\";\nimport useInput from \"../hooks/useInput\";\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from \"../type\";\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostLoading,\n    addPostDone\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput();\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  const onChangeImages = useCallback(e => {\n    console.log(\"images\", e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n      dispatch({\n        type: UPLOAD_IMAGES_REQUEST,\n        data: imageFormData\n      });\n    });\n  });\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  const onSubmit = useCallback(() => {\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data\n    });\n  }, [text]);\n  return __jsx(Form, {\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"\\uC9F9\\uCA31\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: onRemoveImage(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"\\uC81C\\uAC70\")))))) //map 안에 넣고 싶으면 ()넣어야함\n  ;\n};\n\nexport default PostForm;","map":{"version":3,"names":["React","useEffect","useRef","Button","Form","Input","useCallback","useDispatch","useSelector","addPost","useInput","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","imagePaths","addPostLoading","addPostDone","state","post","imageInput","onClickImageUpload","current","click","dispatch","text","onChangeText","setText","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","type","data","onRemoveImage","index","onSubmit","__jsx","encType","onFinish","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","TextArea","value","onChange","name","multiple","hidden","ref","onClick","htmlType","map","v","i","key","id","src"],"sources":["C:/Users/com/Desktop/YH/next/components/PostForm.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addPost } from \"../reducers/post\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from \"../type\";\r\n\r\nconst PostForm = () => {\r\n  const { imagePaths, addPostLoading, addPostDone } = useSelector(\r\n    (state) => state.post\r\n  );\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n  const dispatch = useDispatch();\r\n  const [text, onChangeText, setText] = useInput();\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText(\"\");\r\n    }\r\n  }, [addPostDone]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(\"images\", e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append(\"image\", f);\r\n      dispatch({\r\n        type: UPLOAD_IMAGES_REQUEST,\r\n        data: imageFormData,\r\n      });\r\n    });\r\n  });\r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    });\r\n  });\r\n\r\n  const onSubmit = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data,\r\n    });\r\n  }, [text]);\r\n  return (\r\n    <Form encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n      <Input.TextArea value={text} onChange={onChangeText} />\r\n      <div>\r\n        <input\r\n          type=\"file\"\r\n          name=\"image\"\r\n          multiple\r\n          hidden\r\n          ref={imageInput}\r\n          onChange={onChangeImages}\r\n        />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          짹쨱\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v, i) => (\r\n          <div key={v.id}>\r\n            <img src={`http://localhost:3065/${v}`} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form> //map 안에 넣고 싶으면 ()넣어야함\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}