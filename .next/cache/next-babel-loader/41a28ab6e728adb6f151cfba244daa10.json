{"ast":null,"code":"import produce from \"immer\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_SUCCESS, RETWEET_REQUEST } from \"../type\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  changeNicknameLoading: false,\n  changeNicknameDone: false,\n  changeNicknameError: null\n};\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data); // action.data를 concat해서 기존 데이터에 추가\n        draft.hasMorePost = draft.mainPosts.length < 30;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      //-------------------------------------------------------------------\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS:\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.break;\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      //-------------------------------------------------------------------\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n      //-------------------------------------------------------------------\n\n      default:\n        break;\n    }\n  });\n};\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\n\nexport default rootReducer;","map":{"version":3,"names":["produce","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","RETWEET_FAILURE","RETWEET_SUCCESS","RETWEET_REQUEST","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","likePostLoading","likePostDone","likePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","unlikePostLoading","unlikePostDone","unlikePostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","retweetLoading","retweetDone","retweetError","loadPostLoading","loadPostDone","loadPostError","changeNicknameLoading","changeNicknameDone","changeNicknameError","addPost","data","type","addComment","rootReducer","state","action","draft","filter","v","i","concat","length","error","break","unshift","post","find","id","PostId","Likers","push","UserId","Comments"],"sources":["C:/Users/com/Desktop/YH/next/reducers/post.js"],"sourcesContent":["import produce from \"immer\";\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  REMOVE_IMAGE,\r\n  RETWEET_FAILURE,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_REQUEST,\r\n} from \"../type\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n\r\n  changeNicknameLoading: false,\r\n  changeNicknameDone: false,\r\n  changeNicknameError: null,\r\n};\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data); // action.data를 concat해서 기존 데이터에 추가\r\n        draft.hasMorePost = draft.mainPosts.length < 30;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n\r\n      //-------------------------------------------------------------------\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS:\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.\r\n        break;\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      //-------------------------------------------------------------------\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      //-------------------------------------------------------------------\r\n\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      //-------------------------------------------------------------------\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      //-------------------------------------------------------------------\r\n\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      //-------------------------------------------------------------------\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter(\r\n          (v) => v.id !== action.data.PostId\r\n        );\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      //-------------------------------------------------------------------\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        //const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n      //-------------------------------------------------------------------\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}