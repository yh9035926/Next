{"ast":null,"code":"import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from \"../type\";\nfunction loadPostAPI() {\n  return axios.get(`/posts`);\n}\nfunction* loadPost(action) {\n  try {\n    console.log(\"로드\");\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n//-------------------------------------------------------------\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); //patch 일부분 수정\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"names":["fork","all","takeLatest","delay","put","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","loadPostAPI","get","loadPost","action","console","log","result","data","type","err","response","watchLoadPost","addPostAPI","post","content","addPost","id","watchAddPost","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","postId","addComment","error","watchAddComment","likePostAPI","patch","likePost","watchLikePost","unlikePostAPI","unlikePost","watchUnlikePost","postSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/post.js"],"sourcesContent":["import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_TO_ME,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_OF_ME,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n} from \"../type\";\r\n\r\nfunction loadPostAPI() {\r\n  return axios.get(`/posts`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    console.log(\"로드\")\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\r\n}\r\n//-------------------------------------------------------------\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`); //patch 일부분 수정\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n//-------------------------------------------------------------\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}