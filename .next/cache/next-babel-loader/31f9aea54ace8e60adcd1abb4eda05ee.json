{"ast":null,"code":"import { fork, all, takeLatest, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../type\";\n\n//-------------------------------------------------------------\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchuploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n//-------------------------------------------------------------\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\n//-------------------------------------------------------------\n\nfunction loadUserPostAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n}\n\nfunction* loadUserPost(action) {\n  try {\n    const result = yield call(loadUserPostAPI, action.data, action.lastId);\n    yield put({\n      //put은 dipatch\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadUserPost() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n//-------------------------------------------------------------\n\nfunction loadHashtagPostAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n  //encodeURIComponent  한글을 영문자로 바꿈\n}\n\nfunction* loadHashtagPost(action) {\n  try {\n    const result = yield call(loadHashtagPostAPI, action.data, action.lastId);\n    yield put({\n      //put은 dipatch\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadHashtagPost() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\n//-------------------------------------------------------------\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); //patch 일부분 수정\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnlikePost), fork(watchuploadImages), fork(watchRetweet), fork(watchLoadPost), fork(watchLoadUserPost), fork(watchLoadHashtagPost)]);\n}","map":{"version":3,"names":["fork","all","takeLatest","put","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","addPostAPI","data","post","addPost","action","result","type","id","err","error","response","watchAddPost","uploadImagesAPI","uploadImages","watchuploadImages","loadPostsAPI","lastId","get","loadPosts","watchLoadPosts","loadPostAPI","loadPost","watchLoadPost","loadUserPostAPI","loadUserPost","console","watchLoadUserPost","loadHashtagPostAPI","encodeURIComponent","loadHashtagPost","watchLoadHashtagPost","retweetAPI","retweet","watchRetweet","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","likePostAPI","patch","likePost","watchLikePost","unlikePostAPI","unlikePost","watchUnlikePost","postSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/post.js"],"sourcesContent":["import { fork, all, takeLatest, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_TO_ME,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_OF_ME,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  RETWEET_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n} from \"../type\";\n\n//-------------------------------------------------------------\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchuploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n//-------------------------------------------------------------\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\n//-------------------------------------------------------------\n\nfunction loadUserPostAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); //get에서 데이터 넣기 ? a=b 이런 식으로\n}\n\nfunction* loadUserPost(action) {\n  try {\n    const result = yield call(loadUserPostAPI, action.data, action.lastId);\n    yield put({\n      //put은 dipatch\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err)\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadUserPost() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n//-------------------------------------------------------------\n\nfunction loadHashtagPostAPI(data, lastId) {\n  return axios.get(\n    `/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`\n  ); //get에서 데이터 넣기 ? a=b 이런 식으로\n//encodeURIComponent  한글을 영문자로 바꿈\n  }\nfunction* loadHashtagPost(action) {\n  try {\n    const result = yield call(loadHashtagPostAPI, action.data, action.lastId);\n    yield put({\n      //put은 dipatch\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadHashtagPost() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\n//-------------------------------------------------------------\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: RETWEET_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); //patch 일부분 수정\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n//-------------------------------------------------------------\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchuploadImages),\n    fork(watchRetweet),\n    fork(watchLoadPost),\n    fork(watchLoadUserPost),\n    fork(watchLoadHashtagPost),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}