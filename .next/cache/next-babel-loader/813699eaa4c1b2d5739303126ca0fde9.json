{"ast":null,"code":"import { fork, all, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../type\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      //put은 dipatch\n\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      //put은 dipatch\n\n      type: REMOVE_POST_REQUEST,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(ADD_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${(data, postId)}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["fork","all","takeLatest","delay","put","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","watchAddPost","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/post.js"],"sourcesContent":["import { fork, all, takeLatest, delay, put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport shortId from \"shortid\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_TO_ME,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../type\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: REMOVE_POST_REQUEST,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(ADD_POST_REQUEST, removePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${(data, postId)}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}