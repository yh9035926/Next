{"ast":null,"code":"import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../type\";\nimport { generateDummyPost } from \"../reducers/post\";\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      //put은 dipatch\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${(data, postId)}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/api/post/${(data, postId)}/post`, data);\n}\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchloadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchloadPost)]);\n}","map":{"version":3,"names":["fork","all","takeLatest","delay","put","call","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","generateDummyPost","addPostAPI","data","post","addPost","action","result","id","generate","type","content","err","response","watchAddPost","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","loadPostAPI","get","loadPost","watchloadPost","postSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/post.js"],"sourcesContent":["import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport shortId from \"shortid\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_TO_ME,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_OF_ME,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../type\";\r\nimport { generateDummyPost } from \"../reducers/post\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${(data, postId)}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/api/post/${(data, postId)}/post`, data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LOAD_POST_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchloadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchloadPost),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}