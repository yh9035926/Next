{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from \"../type\";\nimport faker from \"faker\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"제로소\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로소\"\n    }\n  };\n};\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(action.data.content);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n      default:\n        break;\n    }\n  });\n};\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\n\nexport default rootReducer;","map":{"version":3,"names":["shortId","produce","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","faker","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostLoading","loadPostDone","loadPostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","addPost","data","type","addComment","dummyPost","dummyComment","rootReducer","state","arguments","length","undefined","action","draft","unshift","error","concat","filter","v","post","find","postId"],"sources":["C:/Users/com/Desktop/YH/next/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n} from \"../type\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n};\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로소\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로소\",\r\n  },\r\n});\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        //const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift((action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}