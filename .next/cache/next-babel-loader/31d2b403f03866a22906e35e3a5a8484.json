{"ast":null,"code":"import { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_OUT_REQUEST, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../type\";\nimport { all, fork, delay, put, takeEvery, takeLeading, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put은 dipatch\n\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n\n    // const result = yield call(logOutAPI);\n    yield put({\n      //put은 dipatch\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\nfunction* signUp() {\n  try {\n    const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      //put은 dipatch\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction followAPI(data) {\n  return axios.post(\"/api/follow\", data);\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put은 dipatch\n\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction unfollowAPI(data) {\n  return axios.post(\"/api/unfollow\", data);\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put은 dipatch\n\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, logIn); //반복\n}\n\nfunction* watchLogout() {\n  yield takeLeading(LOG_OUT_REQUEST, logOut); //첫 번째 것만\n}\n\nfunction* watchSingUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫 번째 것만\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_REQUEST, follow); //반복\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_REQUEST, unfollow); //반복\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSingUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"names":["LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_OUT_REQUEST","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","all","fork","delay","put","takeEvery","takeLeading","takeLatest","axios","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","signUpAPI","signUp","result","call","followAPI","follow","unfollowAPI","unfollow","watchLogin","watchLogout","watchSingUp","watchFollow","watchUnfollow","userSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/user.js"],"sourcesContent":["import {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_REQUEST,\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n} from \"../type\";\r\n\r\nimport {\r\n  all,\r\n  fork,\r\n  delay,\r\n  put,\r\n  takeEvery,\r\n  takeLeading,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post(\"/api/signUp\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      //put은 dipatch\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI(data) {\r\n  return axios.post(\"/api/follow\", data);\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction unfollowAPI(data) {\r\n  return axios.post(\"/api/unfollow\", data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn); //반복\r\n}\r\n\r\nfunction* watchLogout() {\r\n  yield takeLeading(LOG_OUT_REQUEST, logOut); //첫 번째 것만\r\n}\r\n\r\nfunction* watchSingUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫 번째 것만\r\n}\r\nfunction* watchFollow() {\r\n  yield takeEvery(FOLLOW_REQUEST, follow); //반복\r\n}\r\nfunction* watchUnfollow() {\r\n  yield takeEvery(UNFOLLOW_REQUEST, unfollow); //반복\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogout),\r\n    fork(watchSingUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}