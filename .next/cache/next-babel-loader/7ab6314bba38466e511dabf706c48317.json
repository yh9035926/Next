{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from \"../type\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Image: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로소\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로소\"\n  }\n});\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n      default:\n        break;\n    }\n  });\n};\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\n\nexport default rootReducer;","map":{"version":3,"names":["shortId","produce","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","faker","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostLoading","loadPostDone","loadPostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Image","src","image","Comments","sentence","concat","addPost","data","type","addComment","dummyPost","Images","dummyComment","rootReducer","state","action","draft","unshift","length","error","filter","v","post","find","postId"],"sources":["C:/Users/com/Desktop/YH/next/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n} from \"../type\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n};\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Image: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로소\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로소\",\r\n  },\r\n});\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        //const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}