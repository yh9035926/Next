{"ast":null,"code":"import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../type\";\nfunction loadPostAPI(data) {\n  return axios.get(`/posts`, data);\n}\nfunction* loadPost() {\n  try {\n    const result = yield call(loadPostAPI, data);\n    yield put({\n      //put은 dipatch\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n\n    //const result = yield call(removePostAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      //put은 dipatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"names":["fork","all","takeLatest","delay","put","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","loadPostAPI","data","get","loadPost","result","type","err","response","watchLoadPost","addPostAPI","post","content","addPost","action","id","watchAddPost","removePostAPI","delete","removePost","watchRemovePost","addCommentAPI","postId","addComment","console","error","watchAddComment","postSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/post.js"],"sourcesContent":["import { fork, all, takeLatest, delay, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_TO_ME,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_OF_ME,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../type\";\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/posts`, data);\r\n}\r\n\r\nfunction* loadPost() {\r\n  try {\r\n    const result = yield call(loadPostAPI, data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행 REQUSET는 보내짐\r\n}\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n\r\n    //const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); //마지막 것만\r\n  //throttle(\"ADD_POST_REQUEST\", addPost,2000) 2초 동안 1번 실행\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}