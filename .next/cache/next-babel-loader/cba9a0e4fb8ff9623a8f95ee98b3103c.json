{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../type\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://placeimg.com/200/100/1\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://placeimg.com/200/100/2\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://placeimg.com/200/100/3\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개장판이 나왔군요\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"만두나 먹어야지\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로소\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로소\"\n  }\n});\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        const post = draft.mainPosts.find(v);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n      default:\n        return state;\n    }\n  });\n};\nexport default rootReducer;","map":{"version":3,"names":["shortId","produce","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","addPost","data","type","addComment","dummyPost","dummyComment","rootReducer","state","action","draft","unshift","error","filter","v","post","find"],"sources":["C:/Users/com/Desktop/YH/next/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../type\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프레스\",\r\n      Images: [\r\n        { id: shortId.generate(), src: \"https://placeimg.com/200/100/1\" },\r\n        { id: shortId.generate(), src: \"https://placeimg.com/200/100/2\" },\r\n        { id: shortId.generate(), src: \"https://placeimg.com/200/100/3\" },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개장판이 나왔군요\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"만두나 먹어야지\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n};\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로소\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로소\",\r\n  },\r\n});\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        //const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n\r\n        const post=draft.mainPosts.find((v))\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}