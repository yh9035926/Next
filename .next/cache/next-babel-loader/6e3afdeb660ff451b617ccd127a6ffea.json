{"ast":null,"code":"import { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_OUT_REQUEST, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../type\";\nimport { all, fork, delay, put, takeEvery, takeLeading, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      //put은 dipatch\n\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield put({\n      //put은 dipatch\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n}\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      //put은 dipatch\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction followAPI(data) {\n  return axios.post(\"/api/follow\", data);\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put은 dipatch\n\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI(data) {\n  return axios.post(\"/api/unfollow\", data);\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      //put은 dipatch\n\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, logIn); //반복\n}\n\nfunction* watchLogout() {\n  yield takeLeading(LOG_OUT_REQUEST, logOut); //첫 번째 것만\n}\n\nfunction* watchSingUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫 번째 것만\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_REQUEST, follow); //반복\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_REQUEST, unfollow); //반복\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSingUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"names":["LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_OUT_REQUEST","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","all","fork","delay","put","takeEvery","takeLeading","takeLatest","call","axios","logInAPI","data","post","logIn","action","result","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","console","log","followAPI","follow","unfollowAPI","unfollow","watchLogin","watchLogout","watchSingUp","watchFollow","watchUnfollow","userSaga"],"sources":["C:/Users/com/Desktop/YH/next/sagas/user.js"],"sourcesContent":["import {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_REQUEST,\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n} from \"../type\";\r\n\r\nimport {\r\n  all,\r\n  fork,\r\n  delay,\r\n  put,\r\n  takeEvery,\r\n  takeLeading,\r\n  takeLatest,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/user/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/user/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      //put은 dipatch\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI(data) {\r\n  return axios.post(\"/api/follow\", data);\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction unfollowAPI(data) {\r\n  return axios.post(\"/api/unfollow\", data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      //put은 dipatch\r\n\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn); //반복\r\n}\r\n\r\nfunction* watchLogout() {\r\n  yield takeLeading(LOG_OUT_REQUEST, logOut); //첫 번째 것만\r\n}\r\n\r\nfunction* watchSingUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //첫 번째 것만\r\n}\r\nfunction* watchFollow() {\r\n  yield takeEvery(FOLLOW_REQUEST, follow); //반복\r\n}\r\nfunction* watchUnfollow() {\r\n  yield takeEvery(UNFOLLOW_REQUEST, unfollow); //반복\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogout),\r\n    fork(watchSingUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}