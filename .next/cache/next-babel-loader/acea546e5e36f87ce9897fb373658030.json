{"ast":null,"code":"import produce from \"immer\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_SUCCESS, RETWEET_REQUEST, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST } from \"../type\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  singlePost: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  changeNicknameLoading: false,\n  changeNicknameDone: false,\n  changeNicknameError: null\n};\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      //-------------------------------------------------------------------\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case LOAD_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data); // action.data를 concat해서 기존 데이터에 추가\n        draft.hasMorePost = action.data.length === 10;\n        break;\n      case LOAD_POSTS_FAILURE:\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      //-------------------------------------------------------------------\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      //-------------------------------------------------------------------\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS:\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      //-------------------------------------------------------------------\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n      //-------------------------------------------------------------------\n\n      default:\n        break;\n    }\n  });\n};\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\n\nexport default rootReducer;","map":{"version":3,"names":["produce","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","RETWEET_FAILURE","RETWEET_SUCCESS","RETWEET_REQUEST","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","initialState","mainPosts","imagePaths","hasMorePost","singlePost","addPostLoading","addPostDone","addPostError","likePostLoading","likePostDone","likePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","unlikePostLoading","unlikePostDone","unlikePostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","retweetLoading","retweetDone","retweetError","loadPostsLoading","loadPostsDone","loadPostsError","changeNicknameLoading","changeNicknameDone","changeNicknameError","addPost","data","type","addComment","rootReducer","state","action","draft","filter","v","i","unshift","error","post","find","id","PostId","Likers","push","UserId","concat","length","loadPostLoading","loadPostDone","loadPostError","Comments"],"sources":["C:/Users/com/Desktop/YH/next/reducers/post.js"],"sourcesContent":["import produce from \"immer\";\nimport {\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  REMOVE_IMAGE,\n  RETWEET_FAILURE,\n  RETWEET_SUCCESS,\n  RETWEET_REQUEST,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_REQUEST,\n} from \"../type\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  singlePost: null,\n\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n\n  changeNicknameLoading: false,\n  changeNicknameDone: false,\n  changeNicknameError: null,\n};\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      //-------------------------------------------------------------------\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case LOAD_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data); // action.data를 concat해서 기존 데이터에 추가\n        draft.hasMorePost = action.data.length === 10;\n        break;\n      case LOAD_POSTS_FAILURE:\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      //-------------------------------------------------------------------\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      //-------------------------------------------------------------------\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS:\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      //-------------------------------------------------------------------\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------------------------------------\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        //post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n      //-------------------------------------------------------------------\n\n      default:\n        break;\n    }\n  });\n};\n//immer 쓰면 ...state 안 써도 됨 state 대신 draft\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}